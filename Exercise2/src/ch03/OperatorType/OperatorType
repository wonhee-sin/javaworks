연산자의 종류

연산자는 필요로 하는 피연산자의 수에 따라 단항, 이항, 삼항 연산자로 구분된다

부호 연산자와 증감 연산자는 피연산자 하나만을 요구하므로 단항 연산자이고, 조건 연산자는 조건식, a,b와같이 3개의
피연산자가 필요하므로 삼항 연산자라고 한다. 그 외의 연산자는 2개의 피연산자를 요구하므로 모두 이항 연산자이다.

단항 연산자

단항 연산자는 피연산자가 단 하나뿐인 연산자를 말하며, 여기에는 부호 연산자, 증감 연산자, 논리 부정 연산자가 있다.

부호연산자(+,-)
부호 연산자는 양수 및 음수를 표시하는 +,-를 말한다. boolean타입과 char 타입을 제외한 나머지 기본
타입에 사용할 수 있다.
+,-는 산술 연산자이기도 하고 부호 연산자이기도 한데, 부호 연산자로 쓰일 때에는 하나의 피연산자만 필요하다. 일반적으로 부호 연산자를
다음과 같이 정수 및 실수 리터럴 앞에 붙여 양수 및 음수를 표현한다.

int i1 = +100;
int i2 = -100;
double d1 = +3.14;
double d2 = -10.5;

부호 연산자는 정수 및 실수 타입 변수 앞에도 붙일 수 있다. 이 경우는 변수값의 부호를 유지하거나 바꾸기 위해 사용된다. + 연산자는 변수값의 부호를
유지하고 - 연산자는 변수값의 부호를 양수는 음수로, 음수는 양수로 바꾼다.

다음 코드를 보면 result1에는 x 값인 음수 -100이 그대로 저장된다.
그러나 result2에는 부호가 변경된 양수 -100이 저장된다.

int x = -100;
int result1 = +x;
int result2 = -x;

주의할 점은 부호 연산자의 결과가 int 타입이라는 것이다. 예를들어, byte타입변수를 부호연산하면 int 타입으로 변환된다 그래서 다음 코드는 컴파일 에러가 발생한다.

byte b = 100;
byte result =-b; 	<컴파일 에러 발생

부호 연산의 결과는 int 타입이므로 다음과 같이 int 타입 변수에 저장해야 한다.

byte b = 100;
int result = -b;

증감 연산자
증감 연산자는 변수의 값을 1 증가 시키거나 1 감소 시키는 연산자를 말한다. 불리언 타입을 제외한 모든 기본 타입의 피연산자에 사용할 수 있다.

증가 연산자는 피연산자의 값에 1을 더해 그 결과를 다시 피연산자에 저장한다 예를들어 num의 변수의 값이 5라면 ++num연산 후 num 변수의 값은 6이된다.
그래서 ++연산자를 증가 연산자라고 부른다
 --연산자는 피연산자의 값에서 1을 뺀 후 그 결과를 다시 피연산자에 저장한다 예를들어 num의 변수값이 5라면 --num연산 후 num 변수 값은 4가된다. 그래서 
 --연산자를 감소 연산자라고 부른다
 증가연산자와 감소연산자는 변수의 앞뒤 어디에든 올수 있다. 연산식에서 증감 연산자만 사용된다면 증감 연산자의 위치는 상과없다.
 하지만 다른연산자와 함께 사용된다면 증감 연산자의 위치에따라 연산식의 결과가 다르게 나오므로 주의해야한다. 증감 연산자가 변수 앞에 있으면 우선 
 변수값을 1 증가 또는 1감소시킨후에 다른 연산자를 처리한다. 반면 증감 연산자가 변수 뒤에 있으면 다르 ㄴ연산자를 먼저 처리한 후 변수 값을 1 증가 똔느 1 감소시킨다
 
 예를 들어 다음 코드를 보자
 
 int x = 1;
 int y = 1;
 int result1 = ++x +10;
 int result y++ + 10;
 
 변수 result1 에는 12가 저장된다 . 그 이유는 x 의값이 1 증가되어 2가 된 후 10과 합해져 12가 되기때문이다
 그러나 변수 result2에는 11이 저장된다 그 이유는 y의 값인 1과 10이 합해져서 11이 되고, 그 후에 y의 값이 1 증가되어 2가 되기 때문이다.
 
논리 부정 연산자!
논리 부정 연산자는 true를 false로 false를 true로 변경하기 때문에 boolean타입에만 사용할 수 있다.
논리 부정 연산자느 조건문과 제어문에서 조건식의 값을 부정하도록 해서 실행 흐름을 제어할 때 주로 사용한다. 또한
두가지 상태 번갈아가며 변경하는 토글 기능을 구현할때도 사용한다.
 
이항연산자

이항 연산자는 피 연산자가 2개인 연산자를 말하며 여기에는 산술연산자 문자열 결합연산자, 비교연산자,
논리연산자, 대입연산자 등이있다.

산술 연산자는 사칙연산자인 덧셈 뺄셈 곱셈 나눗셈과 나머지를 구하는%까지 총 5개이다. 산술연살자는
boolean타입을 제외한 모든 기본 타입에 사용할 수 있다.

산술 연산자의 특징은 피연산자들의 타입이 동일하지 않을 경우 다음과 같은 규칙을 사용해서 피연산자들의 타입을 일치 시킨 후 연산을 수행한다는 점이다.

long타입을 제외한 정수 타입 연산은 int타입으로 산출되고 피연산자중 하나라도 실수타입이면
실수타입으로 산출된다.

char 타입도 정수 타입이므로 산술 연산이 가능하다. 주의할 점은 int 타입으로 변환되므로 연산 결과는 int 타입이 된다는 것이다.

문자열 결합 연산자

문자열 결합 연산자인 +는 문자열을 서로 결합하는 연산자이다. +연산자는 산술연산자,부호연산자인
동시에 문자열 결합 연산자이기도 하다. 피연산자 중 한쪽이 문자열이면 +연산자는 문자열 결합 연산자로 사용되어 다른
피연산자를 문자열로 변환하고 서로 결합한다.
 
 예를 들어 아래 코드에서 변수 str1에는 문자열 jdk6.0이 저장되고 str2는 문자열 jdk6.0특징 이저장된다
 
 String str1 ="jdk"+6.0;
 String str2 = str1 + "특징";
 
 간혹 + 연산자가 산술연산자인지 문자열 결합 연산자인지 판단하기 어려운 경우가 있다.
 
 문자열과 숫자가 혼합된 +연산식은 왼쪽에서부터 오른쪽으로 연산이 되어 진행된다.
 
 비교연산자
 비교 연산자는 피연산자의 대소 또는 동등을 비교해서 트루 폴스로 산출한다. 대소 연산자는 블리언을 제외한 기본타입에서 사용할 수있고.
 동등 연산자는 모든 타입에서 사용할 수 있다. 비교연산자는 흐름 제어문인 조건문 반복문 에서 주로 이용되어 실행 흐름을 제어할 때 사용된다.
 만약 피 연산자가char타입이면 유니코드 값으로 비교 연산을 수행한다 예를들어 A의 유니코드는 65이고 b의 유니코드는 66이므로 비교연산자는 65와 66을 비교
 하게된다.

('A' < 'B')		>		(65 < 66)
 
 비교 연산자에서도 연산을 수행하기 전에 피연산자의 타입을 일치시킨다 예를들어 'A' == 65sms 'A'가 int 타입으로 변환되어 65==65로 비교한다.
 마찬가지로 3 == 3.0에서 3이 double 타입을 ㅗ변환되어 3.0==3.0으로 비겨환다.
 
 그러나 한가지 예외가 있는데 0.1 == 0.1f와 같은 경우이다 정상적이라면 0.1f가 왼쪽 피연산자와 같은 double 
 타입으로 변환되어 0.1==0.1이 되고 true가 산출되어야 하지만, 이결과값은 false가 산출된다.
 
 해결책은 피연산자를 모두 float 타입으로 변환해서 비교하거나 정수 타입으로 변환해서 비교하는 것이다.
 
 논리 연산자는 논리곱 논리합 배타적 논리합 논리 부정 연산을 수행한다
 논리 연산자의 피연산자는 블리언 타입만 사용할 수 있다.
 
 &&와 &는 산출 결과는 같지만 연산과정이 조금 다르다 &&는 앞의 연산자가 false라면뒤의 피연산자를 평가하지 않고 바로
 false라는 산출 결과를 나타낸다. 왜나면 하나라도 false라면 전체 연산식은 false이기 때문이다 그러나 &는 두 피연산자 모두를 평가해서
 산출결과를 낸다 따라서 &보다는 &&가 더 효울적으로 동작한다.
 ||도 |와 마찬가지이다. ||는 앞의 연산자가 true라면 뒤의 피연산자를 평가하지않고 바로 true라는 산출 결과를 낸다. 왜나하면 하나라도 true면 전체 연산식은 true이기 때문이다
 그러나 |는 두 피연산자 모두를 평가해서 산출 결과를 낸다
 따라서 |보다는 ||가 더 효율적으로 동작한다
 논리 연산은 흐름 제어문인 조건문 반복문 등에서 주로 이용된다. 
 
 대입 연산자
 
 대입 연산자는 오른쪽 피연산자의 값을 왼쪽 피연산자인 변수에 저장한다
 오른쪽 피연산자에는 리터럴 및 변수
 다른연산식이 올 수 있다. 단순히 오른 쪽 피연산자의 값을 변수에 저장하는 단순 대입 연산자가 있고,
 정해진 연산을 수행한 후 결과를 변수에 저장하는 복합 대입 연산자도 있다.
 
 대입 연산자는 모든 연산자들 중에서 가장 낮으 ㄴ연산 순위를 가지고 있기 때문에
 제일 마지막에 수행된다. 그리고 연산의 진행방향이 오른쪽에서
 왼쪽이다.
 
 삼항연산자(?:)는 3개의 피 연산자를 필요로 하는 연산자를 말한다. 삼항 연산자느 ? 앞의 조건식에따라
 콜론 앞뒤의 피 연산자가 선택된다고 해서 조건 연산식이라고 부르기도 한다. 삼항 연산자를 사용하는 방법은
 다음과 같다
 
 조건식 ? 값 또는 연산식 : 값 또는 연산식
            true 		false
            
조건식을 연산하여 true가 나오면 삼항 연산자의 결과는 피연산자 2가 된다 반면에 조건식을 연산하여 false 가
나오면 삼항 연산자의 결과는 피연산자 3이된다 피 연산자2와 피연산자3에는 주로 값이 오지만
경우에 따라서는 연신식이 올 수도 있다.
삼항 연산자는 if문으로 ㅈ변경해서 작성할 수도 있지만 한줄에 간단하게 작성 하려면 삼항 연산자를 사용하는 것이 더 효율적이다.


증감 연산자 : ++,--를 말하며 변수의 값을 1씩 증가, 1씩 감소시킨다

비교 연산자 == ,!=등을 말하며 값이 같은지 다른지를 비교하고 boolean값을 산출한다.

논리 연산자 : &&,||,!등을말하며 논리곱 논리합 논리부정을 수행하고 boolean값을 산출한다

대입연산자 = , +=, -=등을 말하며 오른쪽의 값을 왼쪽에 대입하거나 연산 후 대입한다.

삼항 연산자(조건식) ? A:B를 말하며 조건이 true면 A를 산출하고 false 이면 B를 산출한다. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 