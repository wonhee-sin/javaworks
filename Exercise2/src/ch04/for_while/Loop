반복문

반복문은 어떤 작업(코드)이 반복적으로 실행되도록 할 때 사용되며, 반복문의 종류로는 for문, while문, do-while문이 있다.
for문과 while 문은 서로 변환이 가능하기 때문에 반복문을 작성할 때 어느 쪽을 선택해도 좋지만, for문은 반복
횟수를 알고 있을 때 주로 사용하고, while문은 조건에 따라 반복할때 주로 사용한다.
while문과 do-while문의 차이점은 조건을 먼저 검사하느냐 나중에 검사하느냐의 차이일 뿐 동작 방식은 동일하다.

for문
프로그램을 작성하다 보면 똑같은 실행문을 반복적으로 실행해야 할 경우가 많이 발생한다. 이럴때 for문을 사용하면 코드를
획기적으로 줄일 수 있다.

int sum = 0;
for (int i = 0; i <= 100; i++){
	sum += i;
	}
System.out.println("1~100의 합:" + sum);

위 for문은 100개의 실행문을 단 3줄로 압축한 것이라고 볼 수 있는데, 반복문은 한 번 작성된 실행문을 여러 번 반복
실행해주기 때문에 코드를 줄여 간결하게 만들어준다. 코드가 간결하면 개발 시간을 줄일 수 있고, 에러가 날 확률도 줄어든다.

for문은 주어진 횟수만큼 실행문을 반복 실행할 때 적합한 본복 제어문니다.

초기화 식은 조건식과 실행문, 증감식에서 사용할 변수를 초기화하는 역할을 한다.초기화식이 필요 없을경우에는 다음과 같이 초기화식을 생략할 수 있다.

int i = 1;
for (; i <= 100; i++){...}

어떤 경우에는 초기화식이 둘 이상 있을 수 있고, 증감식 역시 둘 이상 있을 수 있다. 이런 경우에는 다음과 같이 쉼표로 구분해서 작성한다

for (int i=0, j=100; i<=50 && j>=50; i++, j--) {...}

초기화식에서 선언된 변수는 for문 블록 내부에서 사용되는 로컬 변수이다. 따라서 for문을 벗어나서는 사용할 수 없다.

for문 : for(초기화식; 조건식; 증감식){...} 을 말하며 조건식이 true가 될 때까지만 중괄호 내부를 반복한다. 반복할 때마다 증감식이 실행된다.
	초기화식은 조건식과 증감식에서 사용할 루프 카운터 변수를 초기화한다. 주로 지정된 횟수만큼 반복할 때 사용한다.
	
while문 : while(조건식){...}을 말하며 조건식이 true가 될 때까지만 중괄호 내부를 반복실행한다.

do-while문 : do{...} while(조건식);을 말하며 먼저 do 중괄호 내부를 실행하고 그다음 조건식이 true가 되면 다시 중괄호 내부를 반복 실행한다.

break문: for문,while문,do-while문 내부에서 실행되면 반복을 취소한다.

continue문 : for문, while문, do-while문 내부에서 실행되면 증감식 또는 조건식으로 돌아간다.


Q1. 반복문의 종류를 빈 칸에 넣어보세요

-반복문 : for문 while문 do-while문

Q2. for문을 이용해서 1부터 100까지의 정수 중에서 3의 배수의 총 합을 구하는 코드를 작성해 보세요.


int sum = 0;
for (int i = 1; i <= 100; i++){
	if (i%3 == 0){
		sum +=i;
		}
	}
System.out.println(sum);

Q3. while문과 Math.random()메소드를 이용해서 2개의 주사위를 던졌을 때 나오는 눈을 (눈1,눈2) 형태로 출력하고, 눈의 합이 5가 아니면 계속 주사위를 던지고,
	눈의 합이 5이면 실행을 멈추는 코드를 작성해 보세요.
	
	while(true) {
		int num1 = (int)(Math.random()*6) + 1;
		int num2 = (int)(Math.random()*6) + 1;
		System.out.printf("(%d,%d)",num1,num2);
		if((num1+num2) == 5) {
				break;
			}
	}

Q4. 중첩 for문을 이용하여 방정식 4x + 5y = 60의 모든 해를 구해서 x,y 형태로 출력해 보세요. 단,x와 y는 10 이하의 자연수 입니다.

for (int x=1; x <= 10; x ++) {
			for (int y =1; y<=10; y++) {
				if( (4*x) + (5*y) == 60) {
					System.out.println("(" + x + "," + y + ")");
				}
			}
		}
		
Q5. for문을 이용해서 다음과 같이 *를 출력하는 코드를 작성해 보세요.

for (int x=1; x <= 4; x ++) {
			for(int y=1; y <=x; y++) {
				System.out.print("*");
			}
			System.out.println();
		}
		
Q6. for문을 이용해서 다음과같이 *를 출력하는 코드를 작성해 보세요.	
		
		
	for (int x=4; x >= 1; x--) {
			for(int y=1; y <= 4; y++) {
				if(y < x) {
				System.out.print(" ");
				}else {
					System.out.print("*");
				}
			}
			System.out.println();
		}	
		
Q7. 







































