타입 변환

두 변수의 타입이 동일할 경우, 한쪽 변수값을 다른 쪽 변수에 복사해서 저장할 수 있다. 두 변수의 타입이 다르다면 값의 저장이 가능할 수도 있고
불가능할 수도 있다.

a 변수에 저장된 값을 b 변수에 복사해서 저장하는 코드는 다음과 같다

byte a = 10;
int b = a;

원래 10은 byte 타입의 값이었으나, 복사해서 저장할 때 int 타입의 값으로 변환되었다. 자바에서는 이것을 타입 변환이라고 한다.

자동 타입 변환 Promotion은 말 그대로 자동으로 타입 변환이 일어나는 것을 의미한다. 자동 타입 변환은 값의
허용 범위가 작은 타입이 허용 범위가 큰 타입으로 저장될 때 발생한다.

다음 코드는 int 타입이 byte 타입보다 허용 범위가 더 크기 때문에 자동 타입 변환이 일어난다.

byte byteValue = 10;
int intValue = byteValue;		//자동 타입 변환됨

정수 타입이 실수 타입으로 저장될 경우에는 무조건 자동 타입 변환이 일어난다. 실수 타입은 정수 타입보다 허용 범위가 더 크기 때문이다

long longValue = 5000000000L;
float floatValue = longValue;		//5.0E9F 로 저장
double doubleValue = longValue;		//5.0E9 로 저장

char 타입의 경우 int 타입으로 자동 타입 변환되면 유니코드 값이 int 타입에 저장된다.

char charValue = 'A';
int intValue = charValue;		//65가 저장됨

char 타입보다 허용 범위가 작은 byte 타입은 char 타입으로 자동 타입 변환될 수 없다. 왜냐하면 char 타입의 허용 범위는 음수를 포함하지 않기 때문이다.

byte byteValue = 65;
char charValue = byteValue;		//컴파일 에러



강제 타입 변환

큰 허용 범위 타입은 작은 허용 범위 타입으로 자동 타입 변환 될 수 없다. 마치 큰 그릇에 가득 채운 물을 작은 그릇에 모두 담을수 없는것과 같은 이치이다
하지만 작은 그릇 크기로 나눠서 한 부분만 작은 그릇에 넣는 것은 가능하다.
이와 같이 큰 허용 범위 타입을 작은 허용 범위 타입으로 장제로 나눠서 저장하는 것을 강제 타입 변환(castin) 이라고 한다. 강제 타입 변환은 캐스팅 연산자
괄호를 사용하는데 괄호 안에 들어가는 타입은 나누는 단위이다.

int 타입은 byte 타입보다 더 큰 허용 범위를 가진다. 따라서 int 타입은 byte 타입으로 자동 변환 되지 않는다. 하지만 (byte)캐스팅 연산자를 사용해서
byte 타입으로 강제 변환할 수 있습니다.

int intValue = 10;
byte byteValue = (byte)intValue;		//강제 타입 변환

int 타입은 char 타입보다 더 큰 허용 범위를 가진다. 따라서 int 타입은 char 타입으로 자동 변환 되지 않는다. 위와 같이 (char)캐스팅 연산자를 사용해서
char타입으로 강제 변환할 수 있다. char 타입으로 변환하는 이유는 문자를 출력할 수 있기 때문이다.

int intValue = 65;
char charValue = (char)intValue;	//강제 타입 변환
System.out.println(charValue);		//"A"가 출력

실수 타입은 정수타입으로 자동 변환되지 않기 때문에 강제 타입 변환을 사용해야 한다. 이 경우 소수점 이하 부분은 버려지고, 정수 부분만 저장된다.

double doubleValue =3.14;
int intValue = (int)doubleValue;		//강제 타입 변환, 정수 부분 3만 저장


정수 연산에서의 자동 타입 변환

정수 타입 변수가 산술 연산식에서 피 연산자로 사용되면 int 타입보다 작은 byte, short 타입의 변수는 int 타입으로 자동 타입 변환되어 연산을 수행한다.

(byte 타입 변수가 피연산자로 사용된 경우)
byte x = 10;
byte y = 20;
byte result = x + y;	//컴파일 에러(byte,short는 연산할대 int타입이 되어 연산을 수행함. 그 결과를 byte 타입에 저장할 수 없음.)
int result = x + y;

(int 타입 변수가 피연산자로 사용된 경우)
int x = 10;
int y = 20;
int result = x + y;

정수 연산식에서 모든 변수가 int 타입으로 변환되는 것은 아니다. 두 피연산자 중 허용 범위가 큰 타입으로 변환되어 연산을 수행한다.
예를 들어, long 타입보다 허용 범위가 더 큰 long 타입이 피연산자로 사용되면 다른 피연산자는 무조건 long 타입으로 변환하고 연산을 수행한다.
따라서 연산 결과를 long 타입 변수에 저장해아한다.

long 타입 변수에 저장해야한다 > long result = long타입 연산자 (byte,char,short,int)타입

실수 연산에서의 자동 타입 변환

실수 타입 변수가 산술 연산식에서 피연산자로 사용될 경우 두 피연산자가 동일한 타입이라면 해당 타입으로 연산되지만, 피연산자 중 하나가 double
타입이라면 다른 피연산자도 double 타입으로 자동 타입 변화되어 연산을 수행합니다. 따라서 연산 결과는 double이다.

int 타입과 double 타입을 연산해도 동일한 과정을 거친다. 먼저 int타입의 피연산자가 double타입으로 자동 변환되고 연산을 수행한다.

int intValue = 10;
double doubleValue = 5.5;
double result = intValue + doubleValue;		//result 값에 15.5가 저장된다.

만약 꼭 int 타입으로 연산을 해야한다면 double 타입을 int타입으로 갖제 변환하고 덧셈연산을 수행하면 된다.

int intValue = 10;
double doubleValue = 5.5;
int result intValue + (int)doubleValue;	//result 값에 15가 저장된다.

자바에서 소문자 f 또는 대문자 F가 없는 실수 리터럴을 double 타입으로 해석한다. 그렇기 때문에 연산 결과는 double타입 변수에 저장해아한다.

수학에서 1을 2로 나누면 결과값은 0.5가 된다. 이것을 코드로 옮기면 다음과 같다

int x = 1;
int y = 2;
double result = x / y;
System.out.println(result);

위 코드를 실행하면 0.0이 출력된다 그 이유는 자바에서 정수 연산의 결과는 정수가 되기 때문이다. x/y의 연산 결과는 0.5가 아니라 0이 되고, 0을
double 타입 변수 result에 저장하므로 0.0이 되는 것이다.

위 코드가 0.5 가 되기 위해서는 x/y를 정수 연산이 아니라 실수 연산으로 변경 해야한다. 즉 x,y 둘 중 하나 또는 둘 모두를 double 타입으로
변환하는 것이다. 정수 타입을 실수 타입으로 변환하는 방법은 다음과 같다.
float floatValue = (float) 정수;
double doubleValue = (double) 정수;

만약 (double)(x/y)로 잘못 수정하면 0.0을 얻는데 그 이유는 (x/y)가 먼저 연산되어 0이되고, 여기에 (double)0을 적용해서 0.0이 되기 때문이다.



+ 연산에서의 문자열 자동 타입 변환

자바에서 + 연산자는 두 가지 기능을 가지고 있습니다. 피연산자가 모두 숫자일 경우에는 덧셈연산을 수행하지만, 피연산자 중 하나가 문자열일 경우에는
나머지 피연산자도 문자열로 자동변환되어 문자열 결합 연산을 수행합니다.

int value = 3 + 7;			>		int value = 10;
String str = "3" + 7(자동변환)	>		String str = "37"
String str = 3(자동변환) + "7"	>		String str = "37"

연산식에서 + 연산자가 연이어 나오면 앞에서부터 순차적으로 + 연산을 수행한다. 먼저 수행된 연산이 덧셈 연산자라면 덧셈 결과를 가지고 그 다음 + 연산을 수행한다.
만약 먼저 수행된 연산이 결합 연산(문자열과의 연산)이라면 이후 + 연산은 모두 결합 연산이 된다.
앞에서부터 순차적으로 + 연산을 수행하지 않고 우선 연산하고 싶은 부분이 있다면 해당 부분을 괄호로 감싸준다. 괄호는 최우선으로 연산을 수행한다.


문자열을 기본 타입으로 강제 타입 변환

프로그램에서 문자열을 기본 타입으로 변환하는 경우가 매우 많습니다. 예를 들어, "12"와 "3.5"를 정수 및 실수 타입으로 변환해서 숫자 연산을 하는 경우입니다.

자바에서 문자열을 기본 타입으로 변환하는 방법은 다음과 같다.

byte		String str = "10"
			byte value = byte.parseByte(str);

short		String str = "10"
			short value = short.parseShort(str);
			
int			String str = "10"
			int value = integer.parseInt(str);
			
long		String str = "10"
			long value = long.parseLong(str);
			
float		String str = "10"
			float value = float.parseFloat(str);
			
double		String str = "10"
			double value = double.parseDouble(str);
			
boolean		String str = "10"
			boolean value = boolean.parseBoolean(str);

문자열이 숫자가 아닌 아라벳이나 특수 문자, 한글 등을 포함하고 있을 경우 숫자 타입으로 변환을 시도하면 숫자 형식 예외(NumberFormatException)가 발생한다.

String str = "1a";
int value = integer.parseInt(str);	>>NumberformatException 발생

반대로 기본 타입(byte, short, char, int, long, float, double, boolean)의 값을 문자열로 변경하는 경우도 있는데, 이 경우는 간단히
String.valueOf() 메소드를 이욯하면 된다

String str = String.valueOf(기본타입값);

예를들어, String.valueOf(3)을 실행하면 문자열 "3"을 얻을 수 있다.


- 자동 타입 변환 : 자동으로 타입이 변환되는 것을 말한다. 값의 허용 범위가 작은 타입이 허용 범위가 큰 타입으로 저장될 때 발생한다.
- 강제 타입 변환 : 강제로 타입을 변환하는 것을 말한다. 값의 허용 범위가 큰 타입을 허용 범위가 작은 타입으로 쪼개어서 저장하는 것을 말한다.
- 문자열 결합 연산 : 문자열과 + 연산을 하면 다른 피연산자도 문자열로 변환되어 문자열 결합이 일어난다.
- Integer.parseInt() : 문자열을 정수 int 타입으로 변환한다.
- Double.parseDouble() : 문자열을 실수 double 타입으로 변환한다.


확인 문제

Q1. 자동 타입 변환에 대한 내용입니다. 컴파일 에러가 발생하는 것은 무엇입니까?

byte byteValue = 10;
char charValue = 'A';

1. int intValue = byteValue;		
2. int intValue = charValue;		
3. short shortValue = charValue;	> char 타입의 양의 허용 범위가 short 타입보다 더 큼
4. double doubleValue = byteValue;	

Q2. 강제 타입 변환에 대한 내용입니다. 컴파일 에러가 발생하는 것은 무엇입니까?

int intValue =10;
char charValue = 'A'
double doubleValue = 5.7;
String strValue = "A";

1. double var = (double)intValue;
2. byte var = (byte)intValue;
3. int var = (int)doubleValue;
4. char var = (char)strValue;	>	문자열을 char 타입으로 강제 타입 변환(캐스팅)할 수 없음

Q3. 연산식에서의 타입 변환에 대한 내용입니다. 컴파일 에러가 발생하는것은 무엇입니까?

byte byteValue = 10;
float floatValue = 2.5F
double doubleValue = 2.5;

1. byte result = byteValue + byteValue;		> 연산의 결과는 int 타입임
2. int result = 5 + byteValue;
3. float result = 5 + floatValue;
4. double result = 5 + doubleValue;

Q4. 다음 코드에서 컴파일 에러가 발생하는 위치와 이유를 설명해보세요.

01	short s1 = 1;
02	short s2 = 2;
03	int i1 = 3;
04	int i2 = 4;
05	short result = s1 + s2;		> 연산의 결과는 int 타입임
06	int result = i1 + i2;

Q5. 알파벳 a의 유니코드는 97이고, b의 유니코드는 98입니다. 따라서 a의 유니코드에 1을 더하면 b의 유니코드가 되므로 다음과 같이
	코드를 작성했습니다. 실행결과는 b가 출력되어야 하는데, 컴파일 에러가 발생 했습니다. 무엇이 문제이고 어떻게 수정하면 될까요?

char c1 = 'a';
char c2 = c1 + 1;				> 연산의 결과는 int타입인데, char 타입 변수 c2에 저장했기 때문
System.out.println(c2);

char c1 = 'a';
int c2 = c1 + 1;
System.out.println((char)c2);	>이렇게 수정

Q6. 자바에서 /는 나눗셈 연산자입니다. x/y는 x를y로 나누는 연산을 수행합니다. 빈칸([])에 들어갈 타입은 무엇이며, 출력되는 결과와 그 이유를 설명해보세요.
int x = 5;
int y = 2;
[double] result = x / y;
System.out.println(result);

출력 결과 : 2.0  x,y는 둘다 정수이므로 x / y 는 2로 계산이 된다. 그 2를 double 변수에 저장 했으므로 2.0이 출력됨.
			(변수 타입을 int로 하면 2가 출력)

Q7. 6번 문제에서 출력되는 결과로 2.5가 나오게 하고 싶습니다 빈칸([1]~[2])에 들어갈 코드를 작성해 보세요

int x = 5;
int y = 2;
[double] result = [(double)x / y];
System.out.println(result);

Q8. 두 실수를 덧셈 연산하고 소수점 이하 자리럴 버리고 싶습니다. 빈칸([])에 들어갈 코드를 작성해 보세요

double var1 = 3.5;
double var2 = 2.7;
int result = [(int)(var1 + var2)];


Q9. var1 부터 var4까지 + 연산을 수행해서 int 타입 result 변수에 9가 저장되도록 []에 들어갈 코드를 작성해보세요.

long var1 = 2L;
float var2 = 1.8F;
double var3 = 2.5;
String var4 = "3.9";
int result = [(int)(var1 + var2 + var3) + (int)Double.parseDouble(var4)];
System.out.println(result);

Q10. 다음 코드를 실행했을 때 출력 결과를 적어보세요.

String str1 = 2 + 3 + "";		5
String str2 = 2 + "" + 3;		23
String str3 = "" + 2 + 3;		23

Q11. 문자열을 기본 타입으로 변환하려고 합니다. []에 알맞은 코드를 작성해 보세요.

byte value = [Byte.parseByte]("10");
int value = [Integer.parseInt]("1000");
float value = [Float.parseFloat]("20.5");
double value = [Double.parseDouble]("3.14159");

































