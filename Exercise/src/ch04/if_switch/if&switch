조건문 : if문 switch문

조건문은 조건식에 따라 다른 실행문을 실행하기 위해 사용된다. 조건문의 중류로는 if문 switch문이있다. if문은 조건식의 결과가 true ,false이냐에 따라,
switch문은 변수의 값에 따라 실행문이 결정 된다.

if문

if문은 조건식의 결과에 따라 블록 실행 여부가 결전된다. 조건식에는 true 또는 false값을 산출할 수 있는 연산식이나 ,boolean타입 변수가 올 수 있다.
조건식이 true면 블록을 실행하고 false면 블록을 실행하지 않는다.

중괄호 블록은 여러개의 실행문을 하나로 묶기 위해 작선된다. 만약 조건식이 true가 실행될때 실행해야할 문장이 하나밖에 업삳면 생략할 수 있다.
*괄호 블록은 생략하지 않고 작성하는것을 추천한다. 중괄호 블록을 작성하지 않으면 코드의 가독성이 좋지않아
코드를 해석하기 어려워지고, 버그 발생의 원인이 될 수 있다.

if-else문

if문은 else 블록과ㅏ 함께 사용되어 조건식의 결과에[ 따라 실행 블록을 선택한다.

if문의 조건식이 true면 if문의 블록이 실행되고 false면 else블록이 실행된다.
조건식 결과에 따라 이 2개의 블록중 어느 한 블록의 내용만 실행하고 전체 if문을 벗어나게 된다.

if-else if-else 문

조건문이 여러 개인 if문도 있다. 처음 if문의 조건식이 false일 경우 다른 조건식의 결과에 따라 실행 블록을 선택할수 있는데, if 블록의 끝에
else if문을 붙이면 된다. else if문의 수는 제한이 없으며, 여러 개의 조건식 중 true가 되는 블록만 실행하고 전체 if문을 벗아나게 된다
else if 블록의 마지막에는 else블록을 추가할 수 있는데 모든 조건식이 false 일 경우 else 블록을 실행하고 if 문을 벗어나게 된다.

주사위를 굴려서 나올 수 있는 1, 2, 3, 4, 5, 6 중에서 하나의 수를 무작위로 뽑아서 출력하는 프로그램을 작성해 보자
먼저 정수 난수를 얻는 원리부터 이해해야한다.

1.모든 임의이 정수를 뽑는 밥ㅇ법을 알아야 한다. Math.random()메소드를 활용할 수 있는데, 이 메소드는
0.0과 1.0 사이에 속하는 double 타입의 난수 하나를 리턴한다. 이때 0.0은 범위에 포함되고 1.0.은 포함되지 않는다.
이것을 비교 연산자로 표현하면 다음과 같다.

0.0 <= Math.random() < 1.0

그렇다면 1~ 10 사이의 정수 중에서 하나의 정수를 얻기 위해 각 변에 10을 곱하면 다음과 같은 범위에 속하는 하나의 double 타입의 값을 얻을 수 있다.

0.0 * 10 <= Math.random()*10 < 1.0 * 10

이 상태에서 각 변을 int 타입으로 강제 타입 변환하면 다음과 같은 범위에 속하는 하나의 정수값을 얻을 수 있다.

(int) <= (int)(Math.random()+10) < (int) 1.0

이 상태에서 각 변에 1을 더하면 비로소 1~10사이의 정수 중에서 하나의 정수를 얻게 된다.

0 + 1 <= (int)(Math.random()*10) + 1 < 10 + 1

이 원리를 이용하면 start부터 시작하는 n개의 정수 중에서 임의의 정수 하나를 얻기 위한 연산식을 다음과 같이 만들 수 있다.

int num = (int)(Math.ransdom()*n) + start;

switch문

switch문은 if문과 마찬가지로 조건 제어문입니다. 하지만 switch문은 if문처럼 조건식이 true일 경우에 블록 내부의 실행문을 실행하는 것이 아니라, 변수가
어떤 값을 갖느냐에 따라 실행문이 선택된다.

if문은 조건식의 결과가 true, false 두 가지밖에 없기 때문에 경우의 수가 많아질수록 else -if를 반복적으로 추가해아 하므로 코드가 복잡해진다. 그러나 switch문은
변수의 값에 따라서 실행문이 결정되기 때문에 같은 기능의 if문보다 코드가 간결하다.

switch문은 괄호 안의 변수 값고 동일한 값을 갖는 case로 가서 실행문을 실행합니다. 만약 ㅘㄹ호 안의 변수 값과 동일한 값을 갖는 case가 없으면 default로 가서
실행문을 실행한다. default는 생략 가능하다.

case끝에 break가 붙어 있는 이유는 다음 case를 실행하지 안혹 switch문을 빠져나가기 ㅜ이해서 입니다. break가 업삳면 다음 case 가 연달아 실행되는데,
이때 case값과는 상관없이 실행된다.(이걸 이용해서 2가지 케이스를 동시에 실행하는 프로그램을 만들 수도 있음)

if문 : if(조건식) {...} 을 말하며 조건식이 true가 되면 중괄호 내부를 실행한다.

if-else문 : if(조건식) {...} else {...}를 말하며 조건식이 true가 되면 if 중괄호 내부를 실행하고, false면 else 중괄호 내부를 실행한다.

if-else if-else문 : if(조건식1){...} else if (조건식2){...} else {...}를 말하며 조건식 1이 true가 되면 if 중괄호 내부를 실행하고,
					조건식2가 true가 되면 else if 중괄호 내부를 실행한다 조건식 1,2 가 모두 false 면 else 중괄호 내부를 실행한다.
swithc문 : switch(변수) { case 값 1: ... case 값2 : ... default ...}를 말하며 변수의 값이 값1이면 첫 번째 case 코드를 실행하고
			값2이면 두 번째 case 코드를 실행한다. 값1과 값2가 모두 아니면 default 코드를 실행한다.



			
Q1. 조건문의 종류를 빈 칸에 넣어보세요.

- 조건문 : (if문),(switch문)

Q2. 조건문을 설명한 것 중 맞는 것에 O표, 틀린 것에 X표 하세요.

1.if문은 조건식의 결과에 따라 실행 흐름을 달리할 수 있다.					( O )
2.if문은 조건식이 true이면 블록을 실행하고 false이면 블록을 실행하지 않는다.	( O )
3.if문의 블록 내부에는 또 다른 if문을 사용할 수 있다.						( O )
4.switch문에서 사용할 수 있는 변수의 타입은 int만 가능하다.					( X )

Q3.다음 코드를 실행했을 때 출력되는 내용을 적어보세요

int score = 85;
System.out.print("등급은 ");
if(score < 70) {
System.out.print("D");
} else if (score < 80) {
System.out.print("C");
} else if (score < 90) {
System.out.print("B");
} else {
System.out.print("A");
}
System.out.println("입니다.");


등급은 B입니다.

Q4.다음 코드를 실행했을 때 출력되는 내용을 적어보세요.

System.out.println("어떤 혜택을 원하세요?");
char grade = 'C';
switch(grade) {
	case 'A':System.out.println("VVIP 혜택을 받으실 수 있습니다.");
	case 'B':System.out.println("VIP 혜택을 받으실 수 있습니다."); break;
	case 'C':System.out.println("우수 회원 혜택을 받으실 수 있습니다.");
	case 'D':System.out.println("일반 회원 혜택을 받으실 수 있습니다.");break;
	default: System.out.println("혜택이 없습니다.");
}
System.out.println("감사합니다.");

어떤 혜택을 원하세요?
우수 회원 혜택을 받으실 수 있습니다.
일반 회원 혜택을 받으실 수 있습니다.
감사합니다.

































